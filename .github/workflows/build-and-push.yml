name: Build and Push

on:
  push:
    branches:
      - main
    tags:
      - 'v*'
  pull_request:
    branches:
      - main

env:
  NAMESPACE: dynamicalsystem
  PACKAGE_NAME: gazette
  DOCKER_IMAGE: dynamicalsystem/gazette

jobs:
  build-python:
    runs-on: ubuntu-latest
    env:
      # Halogen configuration for tests (updated dependency v3)
      DYNAMICALSYSTEM_ENVIRONMENT: pytest
      DYNAMICALSYSTEM_FOLDER: /tmp
      CONTENT_GITHUB_URL: https://raw.githubusercontent.com/DynamicalSystem/content/main/
      CONTENT_GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      # Try direct attribute names too
      GITHUB_URL: https://raw.githubusercontent.com/DynamicalSystem/content/main/
      WATERMARKS_WATERMARK_FILE: watermarks.prod.json
      WATERMARK_FILE: watermarks.prod.json
      WATERMARKS_DATA_FOLDER: /tmp/test_data
      PUBLISHERS_BLUESKY_URL: https://bsky.social
      PUBLISHERS_BLUESKY_USERNAME: test_user
      PUBLISHERS_BLUESKY_PASSWORD: test_password
      PUBLISHERS_SIGNAL_URL: http://localhost:8080
      PUBLISHERS_SIGNAL_IDENTITY: "+1234567890"
      PUBLISHERS_SIGNAL_PHONE_NUMBER: "+1234567890"
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: '3.13'
    
    - name: Install uv
      uses: astral-sh/setup-uv@v4
      with:
        enable-cache: true
    
    - name: Install dependencies
      run: |
        uv sync --all-extras --dev
    
    - name: Run tests
      run: |
        uv run pytest --pyargs dynamicalsystem.pytests
    
    - name: Build package
      run: |
        uv build --wheel --package dynamicalsystem.gazette
    
    - name: Check package with twine
      run: |
        uvx twine check dist/*
    
    - name: Upload build artifacts
      uses: actions/upload-artifact@v4
      with:
        name: dist
        path: dist/
        retention-days: 5

  publish-pypi:
    needs: build-python
    runs-on: ubuntu-latest
    if: startsWith(github.ref, 'refs/tags/v')
    
    steps:
    - name: Download build artifacts
      uses: actions/download-artifact@v4
      with:
        name: dist
        path: dist/
    
    - name: Publish to PyPI
      uses: pypa/gh-action-pypi-publish@release/v1
      with:
        user: __token__
        password: ${{ secrets.PYPI_API_TOKEN }}

  build-docker:
    needs: build-python
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
    
    - name: Log in to Docker Hub
      uses: docker/login-action@v3
      with:
        username: ${{ secrets.DOCKER_USERNAME }}
        password: ${{ secrets.DOCKER_PASSWORD }}
    
    - name: Extract metadata
      id: meta
      uses: docker/metadata-action@v5
      with:
        images: ${{ env.DOCKER_IMAGE }}
        tags: |
          type=ref,event=branch
          type=ref,event=pr
          type=semver,pattern={{version}}
          type=semver,pattern={{major}}.{{minor}}
          type=semver,pattern={{major}}
          type=raw,value=latest,enable={{is_default_branch}}
    
    - name: Build and push Docker image
      uses: docker/build-push-action@v5
      with:
        context: .
        file: ./dockerfile
        push: true
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}
        build-args: |
          NAMESPACE=${{ env.NAMESPACE }}
          SCRIPT=${{ env.PACKAGE_NAME }}
        cache-from: type=gha
        cache-to: type=gha,mode=max
        platforms: linux/amd64,linux/arm64

  # Optional: Build Docker image only when PyPI publish succeeds (for tagged releases)
  build-docker-release:
    needs: publish-pypi
    runs-on: ubuntu-latest
    if: startsWith(github.ref, 'refs/tags/v')
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
    
    - name: Log in to Docker Hub
      uses: docker/login-action@v3
      with:
        username: ${{ secrets.DOCKER_USERNAME }}
        password: ${{ secrets.DOCKER_PASSWORD }}
    
    - name: Extract metadata
      id: meta
      uses: docker/metadata-action@v5
      with:
        images: ${{ env.DOCKER_IMAGE }}
        tags: |
          type=semver,pattern={{version}}
          type=semver,pattern={{major}}.{{minor}}
          type=semver,pattern={{major}}
    
    - name: Build and push Docker image (release)
      uses: docker/build-push-action@v5
      with:
        context: .
        file: ./dockerfile
        push: true
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}
        build-args: |
          NAMESPACE=${{ env.NAMESPACE }}
          SCRIPT=${{ env.PACKAGE_NAME }}
        cache-from: type=gha
        cache-to: type=gha,mode=max
        platforms: linux/amd64,linux/arm64